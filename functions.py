#!/usr/bin/env python3

import math
import re

import constants

# Steinhart Hart Coefficients for determining temperature
A = 3.354016e-3
B = 2.460382e-4
C = 3.405377e-6
D = 1.034240e-7

# Steinhart Hart Coefficients for determining resistance
_A = -16.0349
_B = 5459.339
_C = -191141
_D = -3328322


# Converts from Kelvin to Celsius with given precision
def to_celsius(temperature, precision=2):
    return round(temperature - 273.15, precision)


# Converts from Celsius to Kelvin with given precision
def to_kelvin(temperature, precision=2):
    return round(temperature + 273.15, precision)


# Calculates the temperature of the thermistor given its
# current resistance and its resistance at 25 °C
def temp_from_res(resistance=1e+5, rref=1e+5):
    ratio = math.log(resistance / rref)
    # The Steinhart Hart Equation: http://i.imgur.com/WcnzZyT.png
    temperature = A + B * ratio + C * math.pow(ratio, 2) + \
        D * math.pow(ratio, 3)
    # Flip it over
    temperature = math.pow(temperature, -1)
    # Return the result, in °C with two-digit precision
    return round(temperature, 2)


# The Reverse Steinhart Hart Equation: http://i.imgur.com/wiIVNyj.png

# Calculates the resistance of the thermistor given its
# current temperature and its resistance at 25 °C
def res_from_temp(temperature):
    reference_resistance = constants.REFERENCE_RESISTANCE
    e_pow = _A + _B / temperature + _C / math.pow(temperature, 2)\
        + _D / math.pow(temperature, 3)
    return round(reference_resistance * math.exp(e_pow))


def get_ref_res(temperature, resistance):
    """Get the resistance at 25 C according to the current temperature (K)
    and resistance (ohm)
    """
    e_pow = _A + _B / temperature + _C / math.pow(temperature, 2)\
        + _D / math.pow(temperature, 3)

    return round(resistance / math.exp(e_pow))


def get_thermistor_voltage(voltage, vref, gain):
    """Given the gain and voltage generated by me, returns the voltage
    across the thermistor.
    """
    return round(voltage / gain + vref, 3)


def res_from_voltage(voltage):
    """Given the voltage across the thermistor, returns its resistance.
    """
    # 100000 e rezistenta dinaintea thermistorului
    return round(100000.0 * voltage / (constants.MAX_VOLTAGE - voltage))


def voltage_from_res(resistance):
    """Given the resistance in series, calculate the voltage drop.
    """
    supply = constants.MAX_VOLTAGE
    ser_res = constants.SERIES_RESISTANCE
    return round(supply * resistance / (resistance + ser_res), 6)


def gain_from_voltage(v1, v2):
    """Given the maximum and minimum voltage on the thermistor, calculate
    the optimum gain.
    """
    d = max(v1, v2) - min(v1, v2)
    return constants.MAX_VOLTAGE/d


def extract_time(time_string):
    """Returns an int representing the number of seconds in the given
    time_string. time_string should be of format: XhYmZs.
    Valid examples: "1h12m30s" ; "2h30s" ; "3m10s" ; "2m" etc.

    Uses regular expressions to extract only the (number) representing
    the hours, minutes, seconds.
    """
    regexh = r"(\d+)h"
    regexm = r"(\d+)m"
    regexs = r"(\d+)s"
    h, m, s = (re.compile(regexh, 0).findall(time_string),
               re.compile(regexm, 0).findall(time_string),
               re.compile(regexs, 0).findall(time_string))

    h = 0 if len(h) is 0 else int(h[0])
    m = 0 if len(m) is 0 else int(m[0])
    s = 0 if len(s) is 0 else int(s[0])

    return h * 3600 + m * 60 + s


if __name__ == '__main__':
    r = res_from_voltage(1.57)
    print(r)
    print(to_celsius(temp_from_res(resistance=r, rref=1e+5)))
    # print(get_temperature(83300))
    # print(get_temperature(82720))
    # print("hello world!")
    # result = get_resistance(to_kelvin(21.97), 100000)
    # print(result)
